MySQL
============================================================================================================
Managing Databases :-
============================================================================================================
1. Create Databases
SHOW DATABASES; ----> shows all databases.
CREATE DATABASE database_name; ----> creates new database.
CREATE DATABASE IF NOT EXISTS database_name; ----> another way to create new database.
USE database_name; ----> select a specific database or switch to another database.

2. Select Database
USE database_name; ----> select a specific database or switch to another database.

3. Drop Databases
DROP DATABASE database_name;

=============================================================================================================
Managing Tables :- 
============================================================================================================
1. Create Tables
	CREATE TABLE tasks (
						id INT PRIMARY KEY,
						title VARCHAR(255) NOT NULL,
						start_date DATE,
						due_date DATE
					   );
					
2. AUTO_INCREMENT - It automatically generate unique integer values for a column whenever you insert a new 
					row into the table.
					Typically, you use the AUTO_INCREMENT attribute for the primary key column to ensure each 
					row has a unique identifier.
					
	CREATE TABLE contacts(
						id INT AUTO_INCREMENT PRIMARY KEY,
						name VARCHAR(255) NOT NULL,
						email VARCHAR(320) NOT NULL
						 );
3. Rename Tables
	ALTER TABLE old_table_name RENAME TO new_table_name;

4. Add Columns
	CREATE TABLE vendors (
							id INT AUTO_INCREMENT PRIMARY KEY,l
							name VARCHAR(255)
						 );
	ALTER TABLE vendors
	ADD COLUMN phone VARCHAR(15) AFTER name;
	
	ALTER TABLE vendors
	ADD COLUMN vendor_group INT NOT NULL;
	
	ALTER TABLE vendors
	ADD COLUMN email VARCHAR(100) NOT NULL,
	ADD COLUMN hourly_rate decimal(10,2) NOT NULL;

5. Drop Columns
	ALTER TABLE table_name
	DROP COLUMN column_name;

6. Drop Tables
	DROP TABLE table_name; ----> for single table.
	DROP TABLE table_name1,table_name2; -----> for multiple tables.
	DROP TABLE IF EXISTS table_name;

7. Temporary Tables - A temporary table is a special type of table that allows you to store a temporary result 
					  set, which you can reuse several times in a single session.
					  MySQL automatically deletes all temporary tables once the session is ended.
					  Use the CREATE TEMPORARY TABLE statement to create a temporary table.
					  Use the "DROP TEMPORARY TABLE" statement to drop a temporary table.
					  
	CREATE TEMPORARY TABLE credits(
								    customerNumber INT PRIMARY KEY, 
								    creditLimit DEC(10, 2)
								  );

	INSERT INTO credits(customerNumber, creditLimit)
	SELECT 
	  customerNumber, 
	  creditLimit 
	FROM 
	  customers 
	WHERE 
	  creditLimit > 0;
	
	DROP TEMPORARY TABLE credits;
	
=============================================================================================================
Insert data :-
============================================================================================================
1. Insert Into
	INSERT INTO table_name(column1, column2,...) 
	VALUES (value1, value2,...);
	
2. Insert Multiple Rows
	INSERT INTO table(column1, column2,...) 
	VALUES 
	  (value1, value2,...), 
	  (value1, value2,...), 
	  ...
	  (value1, value2,...);
	  
3. Insert Dates
	INSERT INTO events(event_name, event_date)
	VALUES('MySQL Conference','2023-10-29');
	
	INSERT INTO events(event_name, event_date)
	VALUES('MySQL Replication Workshop', CURRENT_DATE);
	

=============================================================================================================
Delete Data
=============================================================================================================
1. TRUNCATE TABLE - The TRUNCATE TABLE statement allows you to delete all rows from a table.
	TRUNCATE TABLE table_name;


=============================================================================================================
Querying Data
=============================================================================================================
1. SELECT FROM
	SELECT lastName FROM employees;
	SELECT * FROM employees;
	
2. SELECT
	SELECT 1 + 1;    
	+-------+
	| 1 + 1 |
	+-------+
	|     2 |
	+-------+
	
	SELECT NOW();
	+---------------------+
	| NOW()               |
	+---------------------+
	| 2021-07-26 08:08:02 |
	+---------------------+
	
	SELECT CONCAT('John',' ','Doe');
	+--------------------------+
	| CONCAT('John',' ','Doe') |
	+--------------------------+
	| John Doe                 |
	+--------------------------+

3. ORDER BY - To sort the rows in the result set, you add the ORDER BY clause to the SELECT statement.
	SELECT 
	  contactLastname, 
	  contactFirstname 
	FROM 
	  customers 
	ORDER BY 
	  contactLastname;
	  
	SELECT 
	  contactLastname, 
	  contactFirstname 
	FROM 
	  customers 
	ORDER BY 
	  contactLastname DESC, 
	  contactFirstname ASC;
	  
	SELECT 
	  orderNumber, 
	  orderLineNumber, 
	  quantityOrdered * priceEach AS subtotal 
	FROM 
	  orderdetails 
	ORDER BY 
	  subtotal DESC;
	  
4. WHERE clause - The WHERE clause allows you to specify a search condition for the rows returned by a query.
	SELECT 
		lastname, 
		firstname, 
		jobtitle
	FROM
		employees
	WHERE
		jobtitle = 'Sales Rep';
		
	SELECT 
		lastname, 
		firstname, 
		jobtitle,
		officeCode
	FROM
		employees
	WHERE
		jobtitle = 'Sales Rep' AND 
		officeCode = 1;
	ORDER BY 
		officeCode , 
		jobTitle;
		
5. DISTINCT - When querying data from a table, you may get duplicate rows. To remove these duplicate rows, 
			  you use the DISTINCT clause in the SELECT statement.
	SELECT 
		DISTINCT lastname
	FROM
		employees
	ORDER BY 
		lastname;
		
6. AND operator - The AND operator is a logical operator that combines two or more Boolean expressions and
				  returns 1, 0, or NULL:
				  Use the AND operator to form conditions in the WHERE clause of the SELECT statement.
				  
+-------+-------+-------+-------+
|       | TRUE  | FALSE | NULL  |
+-------+-------+-------+-------+
| TRUE  | TRUE  | FALSE | NULL  |
| FALSE | FALSE | FALSE | FALSE |
| NULL  | NULL  | FALSE | NULL  |
+-------+-------+-------+-------+
	SELECT 
		customername, 
		country, 
		state
	FROM
		customers
	WHERE
		country = 'USA' AND 
		state = 'CA';

7. OR operator - The OR operator combines two Boolean expressions and returns true when either expression is true. 
				 Otherwise, it returns false.
				 MySQL evaluates the OR operator after the AND operator if an expression contains both 
				 AND and OR operators.
				 Use parentheses to change the order of evaluation.
+-------+-------+-------+-------+
|       | TRUE  | FALSE | NULL  |
+-------+-------+-------+-------+
| TRUE  | TRUE  | TRUE  | TRUE  |
| FALSE | TRUE  | FALSE | NULL  |
| NULL  | TRUE  | NULL  | NULL  |
+-------+-------+-------+-------+

	SELECT    
		customername, 
		country
	FROM    
		customers
	WHERE country = 'USA' OR 
		  country = 'France';
		  
8. IN operator - Use the IN operator to check if a value is in a set of values.
				 Use the IN operator to form a condition for the WHERE clause.
	SELECT 
		officeCode, 
		city, 
		phone, 
		country
	FROM
		offices
	WHERE
		country IN ('USA' , 'France');
		
9. NOT IN operator - Use the MySQL NOT IN to check if a value doesnâ€™t match any value in a list.
	SELECT 
		officeCode, 
		city, 
		phone
	FROM
		offices
	WHERE
		country NOT IN ('USA' , 'France')
	ORDER BY 
		city;

10. BETWEEN - Use the MySQL BETWEEN operator to test if a value falls within a range of values.
	SELECT 
		productCode, 
		productName, 
		buyPrice
	FROM
		products
	WHERE
		buyPrice BETWEEN 90 AND 100;
		
11. LIKE operator - The LIKE operator is a logical operator that tests whether a string contains a specified 
					pattern or not.
					MySQL provides two wildcard characters for constructing patterns: Percentage % and 
					underscore _ .
					The percentage ( % ) wildcard matches any string of zero or more characters.
					The underscore ( _ ) wildcard matches any single character.
	SELECT 
		employeeNumber, 
		lastName, 
		firstName
	FROM
		employees
	WHERE
		firstName LIKE 'a%';
		
12. LIMIT clause - Use the MySQL LIMIT clause to constrain the number of rows returned by the SELECT statement.
	SELECT 
		customerNumber, 
		customerName
	FROM
		customers
	ORDER BY customerName    
	LIMIT 10;
	
13. INNER JOIN - The INNER JOIN matches each row in one table with every row in other tables and allows you to 
				 query rows that contain columns from both tables.
				 
	SELECT 
		productCode, 
		productName, 
		textDescription
	FROM
		products t1
	INNER JOIN productlines t2 
		ON t1.productline = t2.productline; 
		
	SELECT 
		t1.orderNumber,
		t1.status,
		SUM(quantityOrdered * priceEach) total
	FROM
		orders t1
	INNER JOIN orderdetails t2 
		ON t1.orderNumber = t2.orderNumber
	GROUP BY t1.orderNumber;
	
14. LEFT JOIN - Notice that for INNER JOIN clause, the condition in the ON clause is equivalent to the 
				condition in the WHERE clause.
				
	SELECT
		c.customerNumber,
		customerName,
		orderNumber,
		status
	FROM
		customers c
	LEFT JOIN orders o 
		ON c.customerNumber = o.customerNumber;
	
15. RIGHT JOIN - MySQL RIGHT JOIN allows you to query data from two or more related tables.
				 The RIGHT JOIN starts selecting rows from the right table. It always returns rows from 
				 the right table whether or not there are matching rows in the left table.
				 The RIGHT OUTER JOIN is the synonym of the RIGHT JOIN.
	SELECT 
		employeeNumber, 
		customerNumber
	FROM
		customers
	RIGHT JOIN employees 
		ON salesRepEmployeeNumber = employeeNumber
	ORDER BY 
		employeeNumber;
	
16. SELF JOIN - A self join allows you to join a table to itself. Since MySQL does not have specific self 
				join syntax, you need to perform a self join via a regular join such as left join or inner join.
				The MySQL self-join is a technique that joins a table to itself.
				Use table aliases and inner join or left join to perform a self join in MySQL.
				
	SELECT 
		IFNULL(CONCAT(m.lastname, ', ', m.firstname),
				'Top Manager') AS 'Manager',
		CONCAT(e.lastname, ', ', e.firstname) AS 'Direct report'
	FROM
		employees e
	LEFT JOIN employees m ON 
		m.employeeNumber = e.reportsto
	ORDER BY 
		manager DESC;
		
	SELECT 
		c1.city, 
		c1.customerName, 
		c2.customerName
	FROM
		customers c1
	INNER JOIN customers c2 ON 
		c1.city = c2.city
		AND c1.customername > c2.customerName
	ORDER BY 
		c1.city;
		
17. CROSS JOIN - A cross join combines each row from a table with each row from another table, resulting in a 
				 Cartesian product.
				 Use the CROSS JOIN clause to perform a cross join.
				 
	SELECT 
		store_name,
		product_name,
		SUM(quantity * price) AS revenue
	FROM
		sales
	INNER JOIN
		products ON products.id = sales.product_id
	INNER JOIN
		stores ON stores.id = sales.store_id
	GROUP BY store_name , product_name; 

18. GROUP BY - The GROUP BY clause groups rows into summary rows based on column values or expressions. 
			   It returns one row for each group and reduces the number of rows in the result set.
			   
	SELECT 
	  status, 
	  COUNT(*) 
	FROM 
	  orders 
	GROUP BY 
	  status;
	  
	  
	SELECT 
	  status, 
	  SUM(quantityOrdered * priceEach) AS amount 
	FROM 
	  orders 
	  INNER JOIN orderdetails USING (orderNumber) 
	GROUP BY 
	  status;
			   
			   
19. HAVING - The HAVING clause is used with the GROUP BY clause to filter the groups based on a specified
			 condition.
			 The HAVING clause allows you to apply a condition to the groups returned by the GROUP BY clause 
			 and only include groups that meet the specified condition.
			   
    SELECT 
	  ordernumber, 
	  SUM(quantityOrdered) AS itemsCount, 
	  SUM(priceeach * quantityOrdered) AS total 
	FROM 
	  orderdetails 
	GROUP BY 
	  ordernumber 
	HAVING 
	  total > 1000;
			   
	
	SELECT 
		ordernumber,
		SUM(quantityOrdered) AS itemsCount,
		SUM(priceeach*quantityOrdered) AS total
	FROM
		orderdetails
	GROUP BY ordernumber
	HAVING 
		total > 1000 AND 
		itemsCount > 600;
			   
20. HAVING COUNT - 

	+----+--------------+-------------+
	| id | product_name | sale_amount |
	+----+--------------+-------------+
	|  1 | Product A    |     100.50  |
	|  2 | Product B    |      75.25  |
	|  3 | Product A    |     120.75  |
	|  4 | Product C    |      50.00  |
	|  5 | Product B    |      90.80  |
	+----+--------------+-------------+
	
	SELECT 
	  product_name, 
	  COUNT(id) 
	FROM 
	  sales 
	GROUP BY 
	  product_name 
	HAVING 
	  COUNT(id) = 1;
	+--------------+-----------+
	| product_name | COUNT(id) |
	+--------------+-----------+
	| Product C    |         1 |
	+--------------+-----------+
	
	SELECT 
	  product_name, 
	  COUNT(id) 
	FROM 
	  sales 
	GROUP BY 
	  product_name 
	HAVING 
	  COUNT(id) > 1;
	+--------------+-----------+
	| product_name | COUNT(id) |
	+--------------+-----------+
	| Product A    |         2 |
	| Product B    |         2 |
	+--------------+-----------+
	   
21. Window function - A window function in SQL is a type of function that allows us to perform calculations 
					  across a specific set of rows related to the current row. These calculations happen within 
					  a defined window of data, and they are particularly useful for aggregates, rankings, and 
					  cumulative totals without altering the dataset.
					  The OVER clause is key to defining this window. It partitions the data into different 
					  sets (using the PARTITION BY clause) and orders them (using the ORDER BY clause). 
					  These windows enable functions like SUM(), AVG(), ROW_NUMBER(), RANK(), and DENSE_RANK() 
					  to be applied in a sophisticated manner.
	SELECT column_name1, 
		window_function(column_name2)
		OVER([PARTITION BY column_name1] [ORDER BY column_name3]) AS new_column
	FROM table_name;
			   
	-Aggregate Window Function:-
		SUM()
		AVG()
		COUNT()
		MAX()
		MIN()
		
		+---------+-----+------------+----------+
		| Name    | Age | Department | Salary   |
		+---------+-----+------------+----------+
		| Ramesh  |  20 | Finance    |  50,000  |
		| Deep    |  25 | Sales      |  30,000  |
		| Suresh  |  22 | Finance    |  50,000  |
		| Ram     |  28 | Finance    |  20,000  |
		| Pradeep |  22 | Sales      |  20,000  |
		+---------+-----+------------+----------+
		
		SELECT Name, Age, Department, Salary, 
			AVG(Salary) OVER( PARTITION BY Department) AS Avg_Salary
		FROM employee

		+---------+-----+------------+----------+-----------+
		| Name    | Age | Department | Salary   | Avg_Salary|
		+---------+-----+------------+----------+-----------+
		| Ramesh  |  20 | Finance    |  50,000  |   40,000  |
		| Suresh  |  22 | Finance    |  50,000  |   40,000  |
		| Ram     |  28 | Finance    |  20,000  |   40,000  |
		| Deep    |  25 | Sales      |  30,000  |   25,000  |
		| Pradeep |  22 | Sales      |  20,000  |   25,000  |
		+---------+-----+------------+----------+-----------+

	-Ranking Window Functions
		RANK() â€“  As the name suggests, the rank function assigns rank to all the rows within every partition. 
				  Rank is assigned such that rank 1 given to the first row and rows having same value are assigned
				  same rank. For the next rank after two same rank values, one rank value will be skipped. 
				  For instance, if two rows shareÂ­ rank 1, the next row gets rank 3, not 2.
 
		DENSE_RANK() â€“ It assigns rank to each row within partition. Just like rank function first row is assigned
					   rank 1 and rows having same value have same rank. The difference between RANK() and 
					   DENSE_RANK() is that in DENSE_RANK(), for the next rank after two same rank, consecutive 
					   integer is used, no rank is skipped. 
		 
		ROW_NUMBER() â€“ ROW_NUMBER() gives eÂ­ach row a unique number. It numbers rows from oneÂ­ to the total rows. 
					   The rows are put into groups baseÂ­d on their values. Each group is called a partition. 
					   In eÂ­ach partition, rows get numbers one afteÂ­r another. No two rows have the sameÂ­ number 
					   in a partition.
			   
			   
		SELECT 
			ROW_NUMBER() OVER (PARTITION BY Department ORDER BY Salary DESC) AS emp_row_no, 
			Name,  
			Department, 
			Salary,
			RANK() OVER(PARTITION BY Department ORDER BY Salary DESC) AS emp_rank,
			DENSE_RANK() OVER(PARTITION BY Department ORDER BY Salary DESC) AS emp_dense_rank
		FROM 
			employee;	   
			   
		+-------------+---------+------------+----------+----------+----------------+
		| emp_row_no  | Name    | Department | Salary   | emp_rank | emp_dense_rank |
		+-------------+---------+------------+----------+----------+----------------+
		|     1       | Ramesh  | Finance    | 50,000   |    1     |       1        |
		|     2       | Suresh  | Finance    | 50,000   |    1     |       1        |
		|     3       | Ram     | Finance    | 20,000   |    3     |       2        |
		|     1       | Deep    | Sales      | 30,000   |    1     |       1        |
		|     2       | Pradeep | Sales      | 20,000   |    2     |       2        |
		+-------------+---------+------------+----------+----------+----------------+

			   
			   
			   
			   
			   
			   
			   
			   
			   
			   
			   
			   
			   
			   
			   
			   
			   
			   
			   
			   
			   
			   
			   
			   
			   
			   
			   
			   
			   
			   
			   
			   